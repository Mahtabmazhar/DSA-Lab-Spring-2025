Task#01
#include <iostream>
using namespace std;
struct Node {
    int data;
    Node* next;
};
void print_data(Node* head) {
    if (head == NULL) {
        cout << "Linked list is empty" << endl;
        return;
    }
    Node* ptr = head;
    while (ptr != NULL) {
        cout << ptr->data << " ";
        ptr = ptr->next;
    }
    cout << endl;
}
Node* at_end(Node* head, int newvalue) {
    Node* new_node = new Node();
    new_node->data = newvalue;
    new_node->next = NULL;  
    Node* ptr = head;
    while (ptr->next != NULL) {
        ptr = ptr->next;
    }
    ptr->next = new_node;
    return head;  
}
int main() {
    Node node1, node2, node3;
    node1.data = 10;
    node1.next = &node2;
    node2.data = 20;
    node2.next = &node3;
    node3.data = 30;
    node3.next = NULL;
    Node* head = &node1;
    cout << "Original linked list: ";
    print_data(head);
    int newvalue;
    cout << "Enter a value to insert at the end of the linked list: ";
    cin >> newvalue;
    head = at_end(head, newvalue);
    cout << "Linked list after insertion at the end: ";
    print_data(head);
    return 0;
}

Task#02
#include <iostream>
using namespace std;
struct Node {
    int data;
    Node* next;
};
void print_data(Node* head) {
    if (head == NULL) {
        cout << "Linked list is empty" << endl;
        return;
    }
    Node* ptr = head;
    while (ptr != NULL) {
        cout << ptr->data << " ";
        ptr = ptr->next;
    }
    cout << endl;
}
Node* del_at_start(Node* head) {
    if (head == NULL) {
        cout << "The list is already empty, nothing to delete." << endl;
        return head;
    }
    head = head->next;
    return head;
}
int main() {
    Node node1, node2, node3;
    int newvalue;
    cout << "Enter value for Node 1: ";
    cin >> node1.data;
    node1.next = &node2;
    cout << "Enter value for Node 2: ";
    cin >> node2.data;
    node2.next = &node3;
    cout << "Enter value for Node 3: ";
    cin >> node3.data;
    node3.next = NULL;
    Node* head = &node1;
    head = del_at_start(head);
    cout << "Linked list after deleting the first node: ";
    print_data(head);
    return 0;
}

Task#03
#include <iostream>
using namespace std;
struct Node {
    int data;
    Node* next;
};
void print_data(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}
int main() {
    // Creating 4 nodes
    Node node1, node2, node3, node4;
    node1.data = 10; node1.next = &node2;
    node2.data = 20; node2.next = &node3;
    node3.data = 30; node3.next = &node4;
    node4.data = 60; node4.next = NULL;
    Node* head = &node1;
    cout << "Original linked list: ";
    print_data(head);
    // Taking position from user
    int position;
    cout << "Enter position to delete: ";
    cin >> position;
    // Counting the number of nodes
    Node* temp = head;
    int count = 0;
    while (temp != NULL) {
    count++;
    temp = temp->next;
    }
    // Validate position (not start or end)
    if (position < 2 || position >= count) {
    cout << "Invalid position!" << endl;
    return 0;
    }
    // Finding the node before the deletion point
    Node* ptr = head;
    for (int i = 1; i < position - 1; i++) {
    ptr = ptr->next;
    }
    // Deleting the node
    Node* to_delete = ptr->next;
    ptr->next = to_delete->next;   
    // Printing the updated linked list
    cout << "Linked list after deletion: ";
    print_data(head);
    return 0;
}
